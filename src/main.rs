use clap::Parser;
use std::fs;

/// Simple program to greet a person
#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    /// Input file name
    #[clap(short, long)]
    input: String,

    /// Output file name
    #[clap(short, long)]
    output: String,
}

fn compile_command(command: char, tabs: usize) -> String {
    let mut compiled_code = format!("\n{}", "\t".repeat(tabs));

    match command {
        '+' =>
            compiled_code.push_str("cells[currentCell] += 1;"),

        '-' =>
            compiled_code.push_str("if(cells[currentCell] != 0){cells[currentCell] -= 1;}"),

        '<' =>
            compiled_code.push_str("if(currentCell != 0){currentCell -= 1;}"),

        '>' =>
            compiled_code.push_str("if(currentCell != 29999){currentCell += 1;}"),

        ',' =>
            compiled_code.push_str("cells[currentCell] = (int)getchar();"),

        '.' =>
            compiled_code.push_str("printf(\"%c\", cells[currentCell]);"),

	    _ =>
		    compiled_code.push_str("ic") // ic == invalid command
    }

    compiled_code
}

fn main() {
    let args = Args::parse();

    match fs::read_to_string(args.input) {
        Ok(input_code) => {
            let mut compiled_code = "// Generated by bf2c
#include <stdio.h>
int main() {
	int cells[30000];
	int currentCell = 15000;
	int c;
	for (int i = 0; i < 30000; i++) {
		cells[i] = 0;
	}".to_string();
            let mut loop_code = String::new();
            let mut is_in_loop = false;

            for c in input_code.chars() {
                match c {
                    '[' => is_in_loop = true,

                    ']' => {
                        is_in_loop = false;
                        compiled_code.push_str("\n\twhile(cells[currentCell] != 0) {");
                        for ic in loop_code.chars() {
                            let command_to_add = compile_command(ic, 2);
                            if command_to_add.as_str() == "\n\t\tic" {
                                println!("WARNING: Invalid command `{}`, skipping...", c);
                            } else {
                                compiled_code.push_str(command_to_add.as_str());
                            }
                        }
                        compiled_code.push_str("\n\t}");
                        loop_code = String::new();
                    }

                    '\n' | '\t' | '\r' => continue,

                    _ => {
                        if is_in_loop {
                            loop_code.push(c);
                            continue;
                        }

                        let command_to_add = compile_command(c, 1);
                        if command_to_add.as_str() == "\n\t\tic" {
                            println!("WARNING: Invalid command `{}`, skipping...", c);
                        } else {
                            compiled_code.push_str(command_to_add.as_str());
                        }
                    }
                }
            }

            compiled_code.push_str("\n}");

            match fs::write(args.output, compiled_code) {
                Ok(_) => {
                    println!("Successfully compiled!")
                }

                Err(e) => {
                    println!("Error: {}", e);
                }
            }
        }

        Err(e) => {
            println!("Error: {}", e);
        }
    }
}
